{
  "files": [
    {
      "name": "App.js",
      "path": "dealer_sync_frontend/src/App.js",
      "size": 3324,
      "type": "text",
      "content": "import React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Route, Routes, Navigate } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './store/store';\nimport axios from 'axios';\nimport Layout from './components/Layout';\nimport Dashboard from './views/Dashboard';\nimport Listings from './views/Listings';\nimport Sync from './views/Sync';\nimport Auth from './views/Auth';\nimport ProtectedRoute from './components/ProtectedRoute';\n\n// Configure axios\naxios.defaults.baseURL = 'http://localhost:8000';\naxios.defaults.withCredentials = true;\n\nfunction App() {\n  const [user, setUser] = useState(null);\n\n  useEffect(() => {\n    const token = localStorage.getItem('access_token');\n    if (token) {\n      setAuthToken(token);\n      fetchUserData();\n    }\n\n    // Set up axios interceptor for token refresh\n    const interceptor = axios.interceptors.response.use(\n      (response) => response,\n      async (error) => {\n        const originalRequest = error.config;\n        if (error.response?.status === 401 && !originalRequest._retry) {\n          originalRequest._retry = true;\n          try {\n            const refreshToken = localStorage.getItem('refresh_token');\n            const response = await axios.post('/api/auth/token/refresh/', {\n              refresh: refreshToken\n            });\n            const newToken = response.data.access;\n            localStorage.setItem('access_token', newToken);\n            setAuthToken(newToken);\n            originalRequest.headers['Authorization'] = `Bearer ${newToken}`;\n            return axios(originalRequest);\n          } catch (err) {\n            handleLogout();\n          }\n        }\n        return Promise.reject(error);\n      }\n    );\n\n    // Cleanup function\n    return () => {\n      axios.interceptors.response.eject(interceptor);\n    };\n  }, []);\n\n  const setAuthToken = (token) => {\n    if (token) {\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    } else {\n      delete axios.defaults.headers.common['Authorization'];\n    }\n  };\n\n  const fetchUserData = async () => {\n    try {\n      const response = await axios.get('/api/auth/user/');\n      setUser(response.data);\n    } catch (error) {\n      console.error('Error fetching user data:', error);\n      handleLogout();\n    }\n  };\n\n  const handleAuth = (userData, token) => {\n    setUser(userData);\n    localStorage.setItem('access_token', token);\n    setAuthToken(token);\n  };\n\n  const handleLogout = () => {\n    setUser(null);\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('refresh_token');\n    setAuthToken(null);\n  };\n\n  return (\n    <Provider store={store}>\n      <Router>\n        <Routes>\n          <Route path=\"/login\" element={user ? <Navigate to=\"/\" replace /> : <Auth onAuth={handleAuth} />} />\n          <Route element={<ProtectedRoute user={user} />}>\n            <Route element={<Layout user={user} onLogout={handleLogout} />}>\n              <Route path=\"/\" element={<Dashboard />} />\n              <Route path=\"/listings\" element={<Listings />} />\n              <Route path=\"/sync\" element={<Sync />} />\n            </Route>\n          </Route>\n          <Route path=\"*\" element={<Navigate to=\"/\" replace />} />\n        </Routes>\n      </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n",
      "line_count": 108
    },
    {
      "name": "Layout.js",
      "path": "dealer_sync_frontend/src/components/Layout.js",
      "size": 4564,
      "type": "text",
      "content": "import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Link, useLocation, useNavigate, Outlet } from 'react-router-dom';\nimport { Home, List, Repeat, ChevronRight, ChevronLeft, LogOut, User, RefreshCw, Loader } from 'lucide-react';\nimport axios from 'axios';\nimport { checkSyncStatus } from '../store/syncSlice';\n\nconst Layout = ({ onLogout, user }) => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const [isCollapsed, setIsCollapsed] = useState(false);\n  const { syncStatus, progress, taskId, userId } = useSelector((state) => state.sync);\n\n  useEffect(() => {\n    if (taskId && userId === user.id) {\n      const interval = setInterval(() => {\n        dispatch(checkSyncStatus({ taskId, userId }));\n      }, 5000);\n      return () => clearInterval(interval);\n    }\n  }, [taskId, userId, dispatch, user.id]);\n\n  const navItems = [\n    { path: '/', label: 'Dashboard', icon: Home },\n    { path: '/listings', label: 'Listings', icon: List },\n    { path: '/sync', label: 'Sync', icon: Repeat },\n  ];\n\n  const handleLogout = () => {\n    onLogout();\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('refresh_token');\n    localStorage.removeItem('user');\n    delete axios.defaults.headers.common['Authorization'];\n    navigate('/');\n  };\n\n  const renderSyncIcon = () => {\n    switch (syncStatus) {\n      case 'syncing':\n        return <RefreshCw className=\"h-4 w-4 mr-2 animate-spin\" />;\n      case 'checking':\n        return <Loader className=\"h-4 w-4 mr-2 animate-spin\" />;\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      <nav className={`bg-background-light p-4 transition-all duration-300 ${isCollapsed ? 'w-16' : 'w-64'}`}>\n        <div className={`text-2xl font-bold text-secondary-light mb-8 ${isCollapsed ? 'hidden' : 'block'}`}>DealerSync</div>\n        <ul>\n          {navItems.map((item) => (\n            <li key={item.path} className=\"mb-2\">\n              <Link\n                to={item.path}\n                className={`flex items-center p-2 rounded-md transition-colors duration-200 ${location.pathname === item.path\n                    ? 'bg-primary-light text-secondary-light'\n                    : 'text-secondary hover:bg-primary-dark hover:text-secondary-light'\n                  }`}\n              >\n                <item.icon className=\"h-5 w-5\" />\n                {!isCollapsed && <span className=\"ml-2\">{item.label}</span>}\n              </Link>\n            </li>\n          ))}\n          <li className=\"mt-auto\">\n            <div className=\"flex items-center p-2 text-secondary\">\n              <User className=\"h-5 w-5\" />\n              {!isCollapsed && <span className=\"ml-2\">{user?.username}</span>}\n            </div>\n          </li>\n          <li>\n            <button\n              onClick={handleLogout}\n              className=\"flex items-center p-2 rounded-md transition-colors duration-200 text-secondary hover:bg-primary-dark hover:text-secondary-light w-full\"\n            >\n              <LogOut className=\"h-5 w-5\" />\n              {!isCollapsed && <span className=\"ml-2\">Logout</span>}\n            </button>\n          </li>\n        </ul>\n        {(syncStatus === 'syncing' || syncStatus === 'checking') && userId === user.id && (\n          <div className={`mt-4 ${isCollapsed ? 'hidden' : 'block'}`}>\n            <div className=\"flex items-center text-sm text-secondary mb-1\">\n              {renderSyncIcon()}\n              <span>{syncStatus === 'checking' ? 'Checking sync' : 'Sync in progress'}</span>\n            </div>\n            <div className=\"w-full bg-gray-200 rounded-full h-2 dark:bg-gray-700\">\n              {progress > 0 ? (\n                <div\n                  className=\"bg-primary h-2 rounded-full transition-all duration-300\"\n                  style={{ width: `${progress}%` }}\n                ></div>\n              ) : (\n                <div className=\"bg-primary h-2 rounded-full animate-pulse\"></div>\n              )}\n            </div>\n          </div>\n        )}\n        <button\n          onClick={() => setIsCollapsed(!isCollapsed)}\n          className=\"absolute bottom-4 left-4 bg-primary-light text-secondary-light p-2 rounded-full\"\n        >\n          {isCollapsed ? <ChevronRight size={20} /> : <ChevronLeft size={20} />}\n        </button>\n      </nav>\n      <main className=\"flex-1 overflow-y-auto p-8 bg-background\">\n        <Outlet />\n      </main>\n    </div>\n  );\n};\n\nexport default Layout;\n",
      "line_count": 117
    },
    {
      "name": "Sync.js",
      "path": "dealer_sync_frontend/src/views/Sync.js",
      "size": 5449,
      "type": "text",
      "content": "import React, { useState, useEffect, useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport axios from 'axios';\nimport { setSyncStatus, setProgress, setTaskId, setError, resetSync, checkSyncStatus, setUserId } from '../store/syncSlice';\nimport { RefreshCw, Check, AlertTriangle, Loader } from 'lucide-react';\nimport Card from '../components/Card';\nimport CardHeader from '../components/CardHeader';\nimport CardTitle from '../components/CardTitle';\nimport CardContent from '../components/CardContent';\n\nconst Sync = () => {\n  const dispatch = useDispatch();\n  const { syncStatus, progress, taskId, error, totalItems, currentItem, userId } = useSelector((state) => state.sync);\n  const [syncHistory, setSyncHistory] = useState(null);\n  const [isLoadingHistory, setIsLoadingHistory] = useState(true);\n\n  useEffect(() => {\n    const user = JSON.parse(localStorage.getItem('user'));\n    if (user) {\n      dispatch(setUserId(user.id));\n    }\n  }, [dispatch]);\n\n  const fetchSyncStatus = useCallback(async () => {\n    if (taskId && userId) {\n      dispatch(checkSyncStatus({ taskId, userId }));\n    }\n  }, [taskId, userId, dispatch]);\n\n  const fetchSyncHistory = useCallback(async () => {\n    try {\n      setIsLoadingHistory(true);\n      const response = await axios.get('http://localhost:8000/api/scraper/sync/history/', {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem('access_token')}`\n        }\n      });\n      setSyncHistory(response.data);\n    } catch (err) {\n      console.error('Failed to fetch sync history:', err);\n    } finally {\n      setIsLoadingHistory(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    fetchSyncHistory();\n    if (syncStatus === 'syncing' || syncStatus === 'checking') {\n      const interval = setInterval(fetchSyncStatus, 5000);\n      return () => clearInterval(interval);\n    }\n  }, [syncStatus, fetchSyncStatus, fetchSyncHistory]);\n\n  const startSync = async () => {\n    try {\n      dispatch(setSyncStatus('syncing'));\n      dispatch(setProgress(0));\n      dispatch(setError(null));\n      const response = await axios.post('http://localhost:8000/api/scraper/run-now/', {}, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem('access_token')}`\n        }\n      });\n      dispatch(setTaskId(response.data.task_id));\n    } catch (err) {\n      dispatch(setSyncStatus('error'));\n      dispatch(setError('Sync failed to start. Please try again.'));\n    }\n  };\n\n  const renderSyncStatus = () => {\n    switch (syncStatus) {\n      case 'idle':\n        return <RefreshCw size={24} className=\"text-secondary\" />;\n      case 'syncing':\n        return <RefreshCw size={24} className=\"text-primary animate-spin\" />;\n      case 'checking':\n        return <Loader size={24} className=\"text-primary animate-spin\" />;\n      case 'completed':\n        return <Check size={24} className=\"text-green-500\" />;\n      case 'error':\n        return <AlertTriangle size={24} className=\"text-red-500\" />;\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"bg-background min-h-screen text-text p-6\">\n      <h1 className=\"text-4xl font-bold mb-6 text-primary pb-2 border-b-2 border-primary\">Sync Dashboard</h1>\n\n      <Card className=\"mb-6\">\n        <CardHeader>\n          <CardTitle className=\"text-primary\">Sync Status</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex items-center mb-4\">\n            <div className=\"mr-4\">\n              {renderSyncStatus()}\n            </div>\n            <span className=\"capitalize text-lg\">{syncStatus}</span>\n          </div>\n          {(syncStatus === 'syncing' || syncStatus === 'checking') && (\n            <>\n              <div className=\"w-full bg-gray-200 rounded-full h-2.5 mb-4 dark:bg-gray-700\">\n                {progress > 0 ? (\n                  <div className=\"bg-primary h-2.5 rounded-full\" style={{ width: `${progress}%` }}></div>\n                ) : (\n                  <div className=\"bg-primary h-2.5 rounded-full animate-pulse\"></div>\n                )}\n              </div>\n              <div className=\"text-sm text-secondary\">\n                {totalItems ? (\n                  <span>{currentItem} of {totalItems} items processed</span>\n                ) : (\n                  <span>Processing items...</span>\n                )}\n              </div>\n            </>\n          )}\n          <button\n            onClick={startSync}\n            disabled={syncStatus === 'syncing' || syncStatus === 'checking'}\n            className=\"btn mt-4 disabled:opacity-50 disabled:cursor-not-allowed\"\n          >\n            Start Sync\n          </button>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-primary\">Sync History</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {error && <div className=\"text-red-500 mb-4\">{error}</div>}\n          {isLoadingHistory ? (\n            <div>Loading sync history...</div>\n          ) : syncHistory ? (\n            <ul className=\"space-y-2\">\n              <li>Last successful sync: {syncHistory.lastSuccessful || 'N/A'}</li>\n              <li>Total syncs today: {syncHistory.totalToday}</li>\n              <li>Failed syncs today: {syncHistory.failedToday}</li>\n            </ul>\n          ) : (\n            <div>No sync history available.</div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default Sync;\n",
      "line_count": 154
    },
    {
      "name": "syncSlice.js",
      "path": "dealer_sync_frontend/src/store/syncSlice.js",
      "size": 2737,
      "type": "text",
      "content": "import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\nexport const checkSyncStatus = createAsyncThunk(\n  'sync/checkStatus',\n  async ({ taskId, userId }, { rejectWithValue }) => {\n    try {\n      const response = await axios.get(`http://localhost:8000/api/scraper/status/?task_id=${taskId}`, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem('access_token')}`\n        }\n      });\n      return { ...response.data, userId };\n    } catch (err) {\n      return rejectWithValue(err.response.data);\n    }\n  }\n);\n\nconst initialState = {\n  syncStatus: 'idle',\n  progress: 0,\n  taskId: null,\n  error: null,\n  totalItems: null,\n  currentItem: 0,\n  userId: null,\n};\n\nexport const syncSlice = createSlice({\n  name: 'sync',\n  initialState,\n  reducers: {\n    setSyncStatus: (state, action) => {\n      state.syncStatus = action.payload;\n    },\n    setProgress: (state, action) => {\n      state.progress = action.payload;\n    },\n    setTaskId: (state, action) => {\n      state.taskId = action.payload;\n    },\n    setError: (state, action) => {\n      state.error = action.payload;\n    },\n    resetSync: (state) => {\n      state.syncStatus = 'idle';\n      state.progress = 0;\n      state.taskId = null;\n      state.error = null;\n      state.totalItems = null;\n      state.currentItem = 0;\n    },\n    setUserId: (state, action) => {\n      state.userId = action.payload;\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(checkSyncStatus.pending, (state) => {\n        state.syncStatus = 'checking';\n      })\n      .addCase(checkSyncStatus.fulfilled, (state, action) => {\n        if (action.payload.userId !== state.userId) {\n          return; // Ignore updates for other users\n        }\n        if (action.payload.state === 'SUCCESS') {\n          state.syncStatus = 'completed';\n          state.progress = 100;\n        } else if (action.payload.state === 'FAILURE') {\n          state.syncStatus = 'error';\n          state.error = 'Sync failed. Please try again.';\n        } else if (action.payload.state === 'PROGRESS') {\n          state.syncStatus = 'syncing';\n          state.totalItems = action.payload.total || state.totalItems;\n          state.currentItem = action.payload.current;\n          if (state.totalItems) {\n            state.progress = Math.round((state.currentItem / state.totalItems) * 100);\n          }\n        }\n      })\n      .addCase(checkSyncStatus.rejected, (state, action) => {\n        state.syncStatus = 'error';\n        state.error = action.payload || 'Failed to check sync status';\n      });\n  },\n});\n\nexport const { setSyncStatus, setProgress, setTaskId, setError, resetSync, setUserId } = syncSlice.actions;\n\nexport default syncSlice.reducer;\n",
      "line_count": 91
    },
    {
      "name": "store.js",
      "path": "dealer_sync_frontend/src/store/store.js",
      "size": 174,
      "type": "text",
      "content": "import { configureStore } from '@reduxjs/toolkit';\nimport syncReducer from './syncSlice';\n\nexport const store = configureStore({\n  reducer: {\n    sync: syncReducer,\n  },\n});\n",
      "line_count": 8
    },
    {
      "name": "views.py",
      "path": "dealer_sync_backend/authentication/views.py",
      "size": 1052,
      "type": "text",
      "content": "from django.shortcuts import render\nfrom rest_framework import status\nfrom rest_framework.response import Response\nfrom rest_framework.views import APIView\nfrom rest_framework.permissions import IsAuthenticated\nfrom rest_framework_simplejwt.tokens import RefreshToken\nfrom .serializers import UserSerializer\n\nclass RegisterView(APIView):\n    permission_classes = []\n\n    def post(self, request):\n        serializer = UserSerializer(data=request.data)\n        if serializer.is_valid():\n            user = serializer.save()\n            refresh = RefreshToken.for_user(user)\n            return Response({\n                'user': serializer.data,\n                'refresh': str(refresh),\n                'access': str(refresh.access_token),\n            }, status=status.HTTP_201_CREATED)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\nclass UserView(APIView):\n    permission_classes = [IsAuthenticated]\n\n    def get(self, request):\n        serializer = UserSerializer(request.user)\n        return Response(serializer.data)\n",
      "line_count": 29
    },
    {
      "name": "views.py",
      "path": "dealer_sync_backend/scraper/views.py",
      "size": 6620,
      "type": "text",
      "content": "from rest_framework.views import APIView\nfrom rest_framework.response import Response\nfrom rest_framework.permissions import IsAuthenticated\nfrom .tasks import run_scrapers\nfrom .models import SyncAttempt, VehicleListing\nfrom celery.result import AsyncResult\nfrom django.utils import timezone\nfrom celery.exceptions import OperationalError\nfrom .serializers import VehicleListingSerializer\nfrom django.core.exceptions import FieldError\nfrom django.db.models import Count\n\n\nclass StartScraperView(APIView):\n    permission_classes = [IsAuthenticated]\n\n    def post(self, request):\n        try:\n            task = run_scrapers.delay(request.user.id)\n            sync_attempt = SyncAttempt.objects.create(\n                user=request.user,\n                task_id=task.id,\n                status='PENDING'\n            )\n            return Response({\"message\": \"Scraper task started\", \"task_id\": str(task.id)})\n        except OperationalError:\n            return Response({\"error\": \"Could not connect to task queue. Please try again later.\"}, status=503)\n\n\nclass ScraperStatusView(APIView):\n    permission_classes = [IsAuthenticated]\n\n    def get(self, request):\n        task_id = request.query_params.get('task_id')\n        user_id = request.user.id\n        if not task_id:\n            return Response({\"error\": \"No task_id provided\"}, status=400)\n\n        try:\n            sync_attempt = SyncAttempt.objects.filter(\n                task_id=task_id, user_id=user_id).first()\n            if not sync_attempt:\n                return Response({\"error\": \"No sync attempt found for this task and user\"}, status=404)\n\n            task_result = AsyncResult(task_id)\n            if task_result.state == 'PENDING':\n                response = {\n                    'state': task_result.state,\n                    'status': 'Sync task is pending...'\n                }\n            elif task_result.state == 'PROGRESS':\n                response = {\n                    'state': task_result.state,\n                    'current': task_result.info.get('current', 0),\n                    'total': task_result.info.get('total', 1),\n                    'percent': task_result.info.get('percent', 0)\n                }\n            elif task_result.state != 'FAILURE':\n                response = {\n                    'state': task_result.state,\n                    'status': str(task_result.result),\n                }\n            else:\n                response = {\n                    'state': task_result.state,\n                    'status': str(task_result.info),\n                }\n            return Response(response)\n        except OperationalError:\n            return Response({\"error\": \"Could not connect to task queue. Please try again later.\"}, status=503)\n\n\nclass DumpListingsView(APIView):\n    permission_classes = [IsAuthenticated]\n\n    def get(self, request):\n        try:\n            listings = VehicleListing.objects.filter(user=request.user)\n            serializer = VehicleListingSerializer(listings, many=True)\n            return Response({\n                \"count\": listings.count(),\n                \"listings\": serializer.data\n            })\n        except FieldError as e:\n            return Response({\"error\": f\"FieldError: {str(e)}\"}, status=400)\n        except Exception as e:\n            return Response({\"error\": f\"An unexpected error occurred: {str(e)}\"}, status=500)\n\n\nclass SyncHistoryView(APIView):\n    permission_classes = [IsAuthenticated]\n\n    def get(self, request):\n        user = request.user\n        today = timezone.now().date()\n        last_successful = SyncAttempt.objects.filter(\n            user=user, status='COMPLETED').order_by('-end_time').first()\n        sync_history = {\n            \"lastSuccessful\": last_successful.end_time.isoformat() if last_successful else None,\n            \"totalToday\": SyncAttempt.objects.filter(user=user, start_time__date=today).count(),\n            \"failedToday\": SyncAttempt.objects.filter(user=user, start_time__date=today, status='FAILED').count()\n        }\n        return Response(sync_history)\n\n\nclass DashboardView(APIView):\n    permission_classes = [IsAuthenticated]\n\n    def get(self, request):\n        user = request.user\n        total_listings = VehicleListing.objects.filter(user=user).count()\n        today = timezone.now().date()\n        listings_today = VehicleListing.objects.filter(\n            user=user, created_at__date=today).count()\n\n        active_syncs = SyncAttempt.objects.filter(\n            user=user, status='IN_PROGRESS').count()\n        pending_updates = VehicleListing.objects.filter(\n            user=user, needs_update=True).count()\n        total_views = VehicleListing.objects.filter(user=user).aggregate(\n            total_views=Count('views'))['total_views']\n\n        # Get data for chart (last 4 months)\n        chart_data = []\n        for i in range(3, -1, -1):\n            month_start = (timezone.now() -\n                           timezone.timedelta(days=30*i)).replace(day=1)\n            month_end = (month_start + timezone.timedelta(days=32)\n                         ).replace(day=1) - timezone.timedelta(days=1)\n            listings_count = VehicleListing.objects.filter(\n                user=user, created_at__range=(month_start, month_end)).count()\n            views_count = VehicleListing.objects.filter(user=user, created_at__range=(\n                month_start, month_end)).aggregate(total_views=Count('views'))['total_views']\n            chart_data.append({\n                \"name\": month_start.strftime(\"%b\"),\n                \"listings\": listings_count,\n                \"views\": views_count\n            })\n\n        # Recent activity (last 4 events)\n        recent_listings = VehicleListing.objects.filter(\n            user=user).order_by('-created_at')[:4]\n        recent_activity = [\n            {\n                \"title\": \"New Listing Added\",\n                \"description\": f\"{listing.year} {listing.make} {listing.model}\",\n                \"time\": f\"{(timezone.now() - listing.created_at).days} days ago\"\n            } for listing in recent_listings\n        ]\n\n        dashboard_data = {\n            \"stats\": [\n                {\"title\": \"Total Listings\", \"value\": total_listings, \"icon\": \"Car\"},\n                {\"title\": \"Active Syncs\", \"value\": active_syncs, \"icon\": \"Activity\"},\n                {\"title\": \"Pending Updates\",\n                    \"value\": pending_updates, \"icon\": \"Clock\"},\n                {\"title\": \"Total Views\", \"value\": total_views, \"icon\": \"Eye\"},\n            ],\n            \"recentActivity\": recent_activity,\n            \"chartData\": chart_data\n        }\n        return Response(dashboard_data)\n",
      "line_count": 162
    },
    {
      "name": "views.py",
      "path": "dealer_sync_backend/dashboard/views.py",
      "size": 4182,
      "type": "text",
      "content": "from rest_framework.views import APIView\nfrom rest_framework.response import Response\nfrom rest_framework.permissions import IsAuthenticated\nfrom scraper.tasks import run_scrapers\nfrom scraper.models import VehicleListing, SyncAttempt\nfrom .serializers import VehicleListingSerializer\nfrom rest_framework.pagination import PageNumberPagination\nfrom django.db.models import Count\nfrom django.utils import timezone\nfrom datetime import timedelta\n\nclass DashboardView(APIView):\n    permission_classes = [IsAuthenticated]\n\n    def get(self, request):\n        user = request.user\n        total_listings = VehicleListing.objects.filter(user=user).count()\n        today = timezone.now().date()\n        listings_today = VehicleListing.objects.filter(user=user, created_at__date=today).count()\n        \n        active_syncs = SyncAttempt.objects.filter(user=user, status='IN_PROGRESS').count()\n        pending_updates = VehicleListing.objects.filter(user=user, needs_update=True).count()\n        total_views = VehicleListing.objects.filter(user=user).aggregate(total_views=Count('views'))['total_views']\n\n        # Get data for chart (last 4 months)\n        chart_data = []\n        for i in range(3, -1, -1):\n            month_start = (timezone.now() - timedelta(days=30*i)).replace(day=1)\n            month_end = (month_start + timedelta(days=32)).replace(day=1) - timedelta(days=1)\n            listings_count = VehicleListing.objects.filter(user=user, created_at__range=(month_start, month_end)).count()\n            views_count = VehicleListing.objects.filter(user=user, created_at__range=(month_start, month_end)).aggregate(total_views=Count('views'))['total_views']\n            chart_data.append({\n                \"name\": month_start.strftime(\"%b\"),\n                \"listings\": listings_count,\n                \"views\": views_count\n            })\n\n        # Recent activity (last 4 events)\n        recent_listings = VehicleListing.objects.filter(user=user).order_by('-created_at')[:4]\n        recent_activity = [\n            {\n                \"title\": \"New Listing Added\",\n                \"description\": f\"{listing.year} {listing.make} {listing.model}\",\n                \"time\": f\"{(timezone.now() - listing.created_at).days} days ago\"\n            } for listing in recent_listings\n        ]\n\n        dashboard_data = {\n            \"stats\": [\n                {\"title\": \"Total Listings\", \"value\": total_listings, \"icon\": \"Car\"},\n                {\"title\": \"Active Syncs\", \"value\": active_syncs, \"icon\": \"Activity\"},\n                {\"title\": \"Pending Updates\", \"value\": pending_updates, \"icon\": \"Clock\"},\n                {\"title\": \"Total Views\", \"value\": total_views, \"icon\": \"Eye\"},\n            ],\n            \"recentActivity\": recent_activity,\n            \"chartData\": chart_data\n        }\n        return Response(dashboard_data)\n\n\nclass ListingsView(APIView):\n    permission_classes = [IsAuthenticated]\n\n    def get(self, request):\n        paginator = PageNumberPagination()\n        paginator.page_size = 20\n        listings = VehicleListing.objects.filter(user=request.user).order_by('-created_at')\n        result_page = paginator.paginate_queryset(listings, request)\n        serializer = VehicleListingSerializer(result_page, many=True)\n        return paginator.get_paginated_response(serializer.data)\n    \nclass SyncHistoryView(APIView):\n    permission_classes = [IsAuthenticated]\n\n    def get(self, request):\n        today = timezone.now().date()\n        last_successful = SyncAttempt.objects.filter(status='COMPLETED').order_by('-end_time').first()\n        sync_history = {\n            \"lastSuccessful\": last_successful.end_time if last_successful else None,\n            \"totalToday\": SyncAttempt.objects.filter(start_time__date=today).count(),\n            \"failedToday\": SyncAttempt.objects.filter(start_time__date=today, status='FAILED').count()\n        }\n        return Response(sync_history)\n\nclass SyncStartView(APIView):\n    permission_classes = [IsAuthenticated]\n\n    def post(self, request):\n        # Trigger the Celery task\n        task = run_scrapers.delay()\n        return Response({\n            \"message\": \"Sync process started\",\n            \"task_id\": task.id\n        })",
      "line_count": 94
    },
    {
      "name": "tasks.py",
      "path": "dealer_sync_backend/scraper/tasks.py",
      "size": 3172,
      "type": "text",
      "content_preview": "from celery import shared_task\n\nfrom .scraper import run_all_scrapers\n\nfrom .models import SyncAttempt, VehicleListing\n\nfrom django.contrib.auth import get_user_model\n\nfrom django.utils import timezone\n\nfrom celery.utils.log import get_task_logger\n\n\n\nlogger = get_task_logger(__name__)\n\n\n\n\n",
      "line_count": 20
    },
    {
      "name": "models.py",
      "path": "dealer_sync_backend/authentication/models.py",
      "size": 57,
      "type": "text",
      "content": "from django.db import models\n\n# Create your models here.\n",
      "line_count": 3
    },
    {
      "name": "models.py",
      "path": "dealer_sync_backend/scraper/models.py",
      "size": 2116,
      "type": "text",
      "content": "from django.db import models\nfrom django.conf import settings\nfrom django.utils import timezone\n\n\nclass VehicleListing(models.Model):\n    user = models.ForeignKey(\n        settings.AUTH_USER_MODEL,\n        on_delete=models.CASCADE,\n        related_name='vehicle_listings',\n        default=1\n    )\n    dealership = models.CharField(max_length=100)\n    title = models.CharField(max_length=500)\n    price = models.DecimalField(\n        max_digits=10, decimal_places=2, null=True, blank=True)\n    msrp = models.DecimalField(\n        max_digits=10, decimal_places=2, null=True, blank=True)\n    year = models.IntegerField()\n    make = models.TextField()\n    model = models.TextField()\n    image_url = models.URLField(max_length=500)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    views = models.IntegerField(default=0)\n    needs_update = models.BooleanField(default=False)\n\n    def __str__(self):\n        return f\"{self.year} {self.make} {self.model} - {self.dealership} (User: {self.user})\"\n\n\nclass SyncAttempt(models.Model):\n    STATUS_CHOICES = [\n        ('PENDING', 'Pending'),\n        ('IN_PROGRESS', 'In Progress'),\n        ('COMPLETED', 'Completed'),\n        ('FAILED', 'Failed'),\n    ]\n\n    user = models.ForeignKey(\n        settings.AUTH_USER_MODEL,\n        on_delete=models.CASCADE,\n        related_name='sync_attempts',\n        default=1\n    )\n    start_time = models.DateTimeField(auto_now_add=True)\n    end_time = models.DateTimeField(null=True, blank=True)\n    status = models.CharField(\n        max_length=20, choices=STATUS_CHOICES, default='PENDING')\n    listings_added = models.IntegerField(default=0)\n    listings_updated = models.IntegerField(default=0)\n    error_message = models.TextField(blank=True, null=True)\n    task_id = models.CharField(max_length=255, null=True, blank=True)\n\n    def __str__(self):\n        return f\"Sync Attempt {self.id} - {self.status} (User: {self.user})\"\n\n    def duration(self):\n        if self.end_time:\n            return self.end_time - self.start_time\n        return timezone.now() - self.start_time\n",
      "line_count": 61
    },
    {
      "name": "models.py",
      "path": "dealer_sync_backend/dashboard/models.py",
      "size": 57,
      "type": "text",
      "content": "from django.db import models\n\n# Create your models here.\n",
      "line_count": 3
    },
    {
      "name": "urls.py",
      "path": "dealer_sync_backend/authentication/urls.py",
      "size": 442,
      "type": "text",
      "content": "from django.urls import path\nfrom .views import RegisterView, UserView\nfrom rest_framework_simplejwt.views import TokenObtainPairView, TokenRefreshView\n\nurlpatterns = [\n    path('register/', RegisterView.as_view(), name='register'),\n    path('token/', TokenObtainPairView.as_view(), name='token_obtain_pair'),\n    path('token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),\n    path('user/', UserView.as_view(), name='user'),\n]\n",
      "line_count": 10
    },
    {
      "name": "urls.py",
      "path": "dealer_sync_backend/scraper/urls.py",
      "size": 511,
      "type": "text",
      "content": "from django.urls import path\nfrom .views import StartScraperView, ScraperStatusView, SyncHistoryView, DumpListingsView, DashboardView\n\nurlpatterns = [\n    path('start/', StartScraperView.as_view(), name='start-scraper'),\n    path('status/', ScraperStatusView.as_view(), name='scraper-status'),\n    path('sync/history/', SyncHistoryView.as_view(), name='sync-history'),\n    path('listings/', DumpListingsView.as_view(), name='dump-listings'),\n    path('dashboard/', DashboardView.as_view(), name='dashboard'),\n]\n",
      "line_count": 10
    },
    {
      "name": "urls.py",
      "path": "dealer_sync_backend/dealer_sync_backend/urls.py",
      "size": 961,
      "type": "text",
      "content": "\"\"\"\nURL configuration for dealer_sync_backend project.\n\nThe `urlpatterns` list routes URLs to views. For more information please see:\n    https://docs.djangoproject.com/en/5.0/topics/http/urls/\nExamples:\nFunction views\n    1. Add an import:  from my_app import views\n    2. Add a URL to urlpatterns:  path('', views.home, name='home')\nClass-based views\n    1. Add an import:  from other_app.views import Home\n    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')\nIncluding another URLconf\n    1. Import the include() function: from django.urls import include, path\n    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))\n\"\"\"\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/auth/', include('authentication.urls')),\n    path('api/', include('dashboard.urls')),\n    path('api/scraper/', include('scraper.urls')),  # Changed from 'scraping'\n]",
      "line_count": 25
    },
    {
      "name": "urls.py",
      "path": "dealer_sync_backend/dashboard/urls.py",
      "size": 404,
      "type": "text",
      "content": "\n\nfrom django.urls import path\nfrom .views import DashboardView, ListingsView, SyncHistoryView, SyncStartView\n\nurlpatterns = [\n    path('dashboard/', DashboardView.as_view(), name='dashboard'),\n    path('listings/', ListingsView.as_view(), name='listings'),\n    path('sync/history/', SyncHistoryView.as_view(), name='sync_history'),\n    path('sync/start/', SyncStartView.as_view(), name='sync_start'),\n]\n",
      "line_count": 11
    }
  ],
  "directories": [],
  "analysis": {}
}