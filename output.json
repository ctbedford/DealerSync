{
  "files": [
    {
      "name": "models.py",
      "path": "dealer_sync_backend/authentication/models.py",
      "size": 57,
      "type": "text",
      "content": "from django.db import models\n\n# Create your models here.\n",
      "line_count": 3
    },
    {
      "name": "models.py",
      "path": "dealer_sync_backend/scraper/models.py",
      "size": 3084,
      "type": "text",
      "content": "from django.db import models\nfrom django.conf import settings\nfrom django.utils import timezone\nfrom django_stubs_ext import WithAnnotations\nimport hashlib\n\n\nclass VehicleListing(models.Model):\n    id: models.AutoField = models.AutoField(primary_key=True)\n    user: models.ForeignKey = models.ForeignKey(\n        settings.AUTH_USER_MODEL,\n        on_delete=models.CASCADE,\n        related_name='vehicle_listings',\n        default=1\n    )\n    dealership: models.CharField = models.CharField(max_length=100)\n    title: models.CharField = models.CharField(max_length=500)\n    price: models.DecimalField = models.DecimalField(\n        max_digits=10, decimal_places=2, null=True, blank=True)\n    msrp: models.DecimalField = models.DecimalField(\n        max_digits=10, decimal_places=2, null=True, blank=True)\n    year: models.IntegerField = models.IntegerField()\n    make: models.TextField = models.TextField()\n    model: models.TextField = models.TextField()\n    image_url: models.URLField = models.URLField(max_length=500)\n    created_at: models.DateTimeField = models.DateTimeField(auto_now_add=True)\n    updated_at: models.DateTimeField = models.DateTimeField(auto_now=True)\n    views: models.IntegerField = models.IntegerField(default=0)\n    needs_update: models.BooleanField = models.BooleanField(default=False)\n    dealer_specific_id: models.CharField = models.CharField(\n        max_length=20, unique=True)\n    vin: models.CharField = models.CharField(\n        max_length=17, null=True, blank=True)\n    color: models.CharField = models.CharField(\n        max_length=50, null=True, blank=True)\n    # New field for unique identifier\n\n    class Meta:\n        unique_together = ('year', 'make', 'model', 'dealer_specific_id')\n\n    def __str__(self):\n        return f\"{self.year} {self.make} {self.model} - {self.dealership} (User: {self.user})\"\n\n\nclass SyncAttempt(models.Model):\n    STATUS_CHOICES = [\n        ('PENDING', 'Pending'),\n        ('IN_PROGRESS', 'In Progress'),\n        ('COMPLETED', 'Completed'),\n        ('FAILED', 'Failed'),\n    ]\n\n    user: models.ForeignKey = models.ForeignKey(\n        settings.AUTH_USER_MODEL,\n        on_delete=models.CASCADE,\n        related_name='sync_attempts',\n        default=1\n    )\n    start_time: models.DateTimeField = models.DateTimeField(auto_now_add=True)\n    end_time: models.DateTimeField = models.DateTimeField(\n        null=True, blank=True)\n    status: models.CharField = models.CharField(\n        max_length=20, choices=STATUS_CHOICES, default='PENDING')\n    listings_added: models.IntegerField = models.IntegerField(default=0)\n    listings_updated: models.IntegerField = models.IntegerField(default=0)\n    error_message: models.TextField = models.TextField(blank=True, null=True)\n    task_id: models.CharField = models.CharField(\n        max_length=255, null=True, blank=True)\n\n    def __str__(self):\n        return f\"Sync Attempt {self.id} - {self.status} (User: {self.user})\"\n\n    def duration(self):\n        if self.end_time:\n            return self.end_time - self.start_time\n        return timezone.now() - self.start_time\n",
      "line_count": 76
    },
    {
      "name": "models.py",
      "path": "dealer_sync_backend/dashboard/models.py",
      "size": 57,
      "type": "text",
      "content": "from django.db import models\n\n# Create your models here.\n",
      "line_count": 3
    },
    {
      "name": "tasks.py",
      "path": "dealer_sync_backend/scraper/tasks.py",
      "size": 3848,
      "type": "text",
      "content_preview": "from celery import shared_task\n\nfrom .scraper import run_all_scrapers\n\nfrom .models import SyncAttempt, VehicleListing\n\nfrom django.contrib.auth import get_user_model\n\nfrom django.utils import timezone\n\nfrom celery.utils.log import get_task_logger\n\n\n\nlogger = get_task_logger(__name__)\n\n\n\n\n",
      "line_count": 20
    },
    {
      "name": "scraper.py",
      "path": "dealer_sync_backend/scraper/scraper.py",
      "size": 7326,
      "type": "text",
      "content_preview": "import requests\n\nfrom bs4 import BeautifulSoup\n\nfrom django.utils import timezone\n\nfrom .models import VehicleListing\n\nimport logging\n\nimport re\n\nfrom django.db import DataError\n\nfrom django.contrib.auth.models import User\n\nfrom urllib.parse import urljoin\n\nimport time\n",
      "line_count": 20
    },
    {
      "name": "serializers.py",
      "path": "dealer_sync_backend/authentication/serializers.py",
      "size": 570,
      "type": "text",
      "content": "from rest_framework import serializers\nfrom django.contrib.auth.models import User\n\n\nclass UserSerializer(serializers.ModelSerializer):\n    password = serializers.CharField(write_only=True)\n\n    class Meta:\n        model = User\n        fields = ('id', 'username', 'email', 'password')\n        read_only_fields = ('id',)\n\n    def create(self, validated_data):\n        user = User.objects.create_user(\n            username=validated_data['username'],\n            email=validated_data['email'],\n            password=validated_data['password']\n        )\n        return user\n",
      "line_count": 19
    },
    {
      "name": "serializers.py",
      "path": "dealer_sync_backend/scraper/serializers.py",
      "size": 428,
      "type": "text",
      "content": "from rest_framework import serializers\nfrom .models import VehicleListing\n\n\nclass VehicleListingSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = VehicleListing\n        fields = ['id', 'dealership', 'title', 'price', 'msrp', 'year', 'make',\n                  'model', 'image_url', 'created_at', 'updated_at', 'views', 'needs_update']\n        read_only_fields = ['id', 'created_at', 'updated_at', 'views']\n",
      "line_count": 10
    },
    {
      "name": "serializers.py",
      "path": "dealer_sync_backend/dashboard/serializers.py",
      "size": 319,
      "type": "text",
      "content": "from rest_framework import serializers\nfrom scraper.models import VehicleListing\n\nclass VehicleListingSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = VehicleListing\n        fields = ['id', 'dealership', 'title', 'price', 'msrp', 'year', 'make', 'model', 'image_url', 'created_at', 'updated_at']",
      "line_count": 7
    },
    {
      "name": "App.js",
      "path": "dealer_sync_frontend/src/App.js",
      "size": 3290,
      "type": "text",
      "content": "import React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Route, Routes, Navigate } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './store/store';\nimport axios from 'axios';\nimport Layout from './components/Layout';\nimport Dashboard from './views/Dashboard';\nimport Listings from './views/Listings';\nimport Sync from './views/Sync';\nimport Auth from './views/Auth';\nimport ProtectedRoute from './components/ProtectedRoute';\n\naxios.defaults.baseURL = 'http://localhost:8000';\naxios.defaults.withCredentials = true;\n\nfunction App() {\n  const [user, setUser] = useState(null);\n\n  useEffect(() => {\n    const checkUserSession = async () => {\n      const token = localStorage.getItem('access_token');\n      if (token) {\n        try {\n          axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n          const response = await axios.get('/api/auth/user/');\n          setUser(response.data);\n        } catch (error) {\n          console.error('Failed to fetch user session:', error);\n          // Clear invalid token\n          localStorage.removeItem('access_token');\n          delete axios.defaults.headers.common['Authorization'];\n        }\n      }\n    };\n\n    checkUserSession();\n\n    const interceptor = axios.interceptors.response.use(\n      (response) => response,\n      async (error) => {\n        const originalRequest = error.config;\n        if (error.response?.status === 401 && !originalRequest._retry) {\n          originalRequest._retry = true;\n          try {\n            const refreshToken = localStorage.getItem('refresh_token');\n            const response = await axios.post('/api/auth/token/refresh/', {\n              refresh: refreshToken\n            });\n            const newToken = response.data.access;\n            localStorage.setItem('access_token', newToken);\n            axios.defaults.headers.common['Authorization'] = `Bearer ${newToken}`;\n            return axios(originalRequest);\n          } catch (err) {\n            handleLogout();\n          }\n        }\n        return Promise.reject(error);\n      }\n    );\n\n    return () => {\n      axios.interceptors.response.eject(interceptor);\n    };\n  }, []);\n\n  const handleAuth = (userData, token) => {\n    setUser(userData);\n    localStorage.setItem('access_token', token);\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n  };\n\n  const handleLogout = () => {\n    setUser(null);\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('refresh_token');\n    delete axios.defaults.headers.common['Authorization'];\n  };\n\n  return (\n    <Provider store={store}>\n      <Router>\n        <Routes>\n          <Route path=\"/login\" element={user ? <Navigate to=\"/\" replace /> : <Auth onAuth={handleAuth} />} />\n          <Route element={<ProtectedRoute user={user} />}>\n            <Route element={<Layout user={user} onLogout={handleLogout} />}>\n              <Route path=\"/\" element={<Dashboard />} />\n              <Route path=\"/listings\" element={<Listings />} />\n              <Route path=\"/sync\" element={<Sync />} />\n            </Route>\n          </Route>\n          <Route path=\"*\" element={<Navigate to=\"/\" replace />} />\n        </Routes>\n      </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n",
      "line_count": 98
    }
  ],
  "directories": [],
  "analysis": {}
}