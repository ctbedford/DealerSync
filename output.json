{
  "files": [
    {
      "name": ".env",
      "path": ".env",
      "size": 166,
      "type": "other"
    },
    {
      "name": "requirements.txt",
      "path": "requirements.txt",
      "size": 691,
      "type": "other"
    },
    {
      "name": "manage.py",
      "path": "manage.py",
      "size": 675,
      "type": "text",
      "content_preview": "#!/usr/bin/env python\n\n\"\"\"Django's command-line utility for administrative tasks.\"\"\"\n\nimport os\n\nimport sys\n\n\n\n\n\ndef main():\n\n    \"\"\"Run administrative tasks.\"\"\"\n\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"dealer_sync_backend.settings\")\n\n    try:\n",
      "line_count": 20
    },
    {
      "name": "apps.py",
      "path": "authentication/apps.py",
      "size": 160,
      "type": "text",
      "content_preview": "from django.apps import AppConfig\n\n\n\n\n\nclass AuthenticationConfig(AppConfig):\n\n    default_auto_field = 'django.db.models.BigAutoField'\n\n    name = 'authentication'\n",
      "line_count": 12
    },
    {
      "name": "urls.py",
      "path": "authentication/urls.py",
      "size": 442,
      "type": "text",
      "content": "from django.urls import path\nfrom .views import RegisterView, UserView\nfrom rest_framework_simplejwt.views import TokenObtainPairView, TokenRefreshView\n\nurlpatterns = [\n    path('register/', RegisterView.as_view(), name='register'),\n    path('token/', TokenObtainPairView.as_view(), name='token_obtain_pair'),\n    path('token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),\n    path('user/', UserView.as_view(), name='user'),\n]\n",
      "line_count": 10
    },
    {
      "name": "views.py",
      "path": "authentication/views.py",
      "size": 1052,
      "type": "text",
      "content": "from django.shortcuts import render\nfrom rest_framework import status\nfrom rest_framework.response import Response\nfrom rest_framework.views import APIView\nfrom rest_framework.permissions import IsAuthenticated\nfrom rest_framework_simplejwt.tokens import RefreshToken\nfrom .serializers import UserSerializer\n\nclass RegisterView(APIView):\n    permission_classes = []\n\n    def post(self, request):\n        serializer = UserSerializer(data=request.data)\n        if serializer.is_valid():\n            user = serializer.save()\n            refresh = RefreshToken.for_user(user)\n            return Response({\n                'user': serializer.data,\n                'refresh': str(refresh),\n                'access': str(refresh.access_token),\n            }, status=status.HTTP_201_CREATED)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\nclass UserView(APIView):\n    permission_classes = [IsAuthenticated]\n\n    def get(self, request):\n        serializer = UserSerializer(request.user)\n        return Response(serializer.data)\n",
      "line_count": 29
    },
    {
      "name": "tests.py",
      "path": "authentication/tests.py",
      "size": 1494,
      "type": "text",
      "content_preview": "from django.test import TestCase\n\nfrom django.urls import reverse\n\nfrom rest_framework.test import APIClient\n\nfrom rest_framework import status\n\nfrom django.contrib.auth.models import User\n\n\n\nclass AuthenticationTests(TestCase):\n\n    def setUp(self):\n\n        self.client = APIClient()\n\n        self.user = User.objects.create_user(username='testuser', password='testpass123', email='test@example.com')\n",
      "line_count": 20
    },
    {
      "name": "serializers.py",
      "path": "authentication/serializers.py",
      "size": 552,
      "type": "text",
      "content": "#!/usr/bin/env python3\n\nfrom rest_framework import serializers\nfrom django.contrib.auth.models import User\n\nclass UserSerializer(serializers.ModelSerializer):\n    password = serializers.CharField(write_only=True)\n\n    class Meta:\n        model = User\n        fields = ('username', 'email', 'password')\n\n    def create(self, validated_data):\n        user = User.objects.create_user(\n            username=validated_data['username'],\n            email=validated_data['email'],\n            password=validated_data['password']\n        )\n        return user\n",
      "line_count": 19
    },
    {
      "name": "__init__.py",
      "path": "authentication/__init__.py",
      "size": 0,
      "type": "text",
      "content_preview": "",
      "line_count": 1
    },
    {
      "name": "admin.py",
      "path": "authentication/admin.py",
      "size": 63,
      "type": "text",
      "content": "from django.contrib import admin\n\n# Register your models here.\n",
      "line_count": 3
    },
    {
      "name": "models.py",
      "path": "authentication/models.py",
      "size": 57,
      "type": "text",
      "content": "from django.db import models\n\n# Create your models here.\n",
      "line_count": 3
    },
    {
      "name": "apps.py",
      "path": "scraper/apps.py",
      "size": 171,
      "type": "text",
      "content_preview": "from django.apps import AppConfig\n\n\n\nclass ScraperConfig(AppConfig):\n\n    default_auto_field = 'django.db.models.BigAutoField'\n\n    name = 'scraper'  # Changed from 'scraping'",
      "line_count": 9
    },
    {
      "name": "urls.py",
      "path": "scraper/urls.py",
      "size": 528,
      "type": "text",
      "content": "from django.urls import path\nfrom .views import StartScraperView, ScraperStatusView, RunScraperNowView, SyncHistoryView, DumpListingsView\n\nurlpatterns = [\n    path('start/', StartScraperView.as_view(), name='start_scraper'),\n    path('status/', ScraperStatusView.as_view(), name='scraper_status'),\n    path('run-now/', RunScraperNowView.as_view(), name='run_scraper_now'),\n    path('sync/history/', SyncHistoryView.as_view(), name='sync_history'),\n    path('dump-listings/', DumpListingsView.as_view(), name='dump_listings'),\n]\n",
      "line_count": 10
    },
    {
      "name": "views.py",
      "path": "scraper/views.py",
      "size": 3642,
      "type": "text",
      "content": "from rest_framework.views import APIView\nfrom rest_framework.response import Response\nfrom rest_framework.permissions import IsAuthenticated\nfrom .tasks import run_scrapers\nfrom .models import SyncAttempt, VehicleListing\nfrom celery.result import AsyncResult\nfrom django.utils import timezone\nfrom celery.exceptions import OperationalError\nfrom .serializers import VehicleListingSerializer\n\nclass DumpListingsView(APIView):\n    permission_classes = [IsAuthenticated]\n\n    def get(self, request):\n        listings = VehicleListing.objects.filter(user=request.user)\n        serializer = VehicleListingSerializer(listings, many=True)\n        return Response({\n            \"count\": listings.count(),\n            \"listings\": serializer.data\n        })\n\n\nclass StartScraperView(APIView):\n    permission_classes = [IsAuthenticated]\n    \n    def post(self, request):\n        try:\n            task = run_scrapers.delay()\n            return Response({\"message\": \"Scraper task started\", \"task_id\": str(task.id)})\n        except OperationalError:\n            return Response({\"error\": \"Could not connect to task queue. Please try again later.\"}, status=503)\n\nclass ScraperStatusView(APIView):\n    permission_classes = [IsAuthenticated]\n\n    def get(self, request):\n        task_id = request.query_params.get('task_id')\n        if not task_id:\n            return Response({\"error\": \"No task_id provided\"}, status=400)\n\n        try:\n            task_result = AsyncResult(task_id)\n            if task_result.state == 'PENDING':\n                response = {\n                    'state': task_result.state,\n                    'status': 'Sync task is pending...'\n                }\n            elif task_result.state != 'FAILURE':\n                response = {\n                    'state': task_result.state,\n                    'status': str(task_result.info),\n                }\n            else:\n                response = {\n                    'state': task_result.state,\n                    'status': str(task_result.info),\n                }\n            return Response(response)\n        except OperationalError:\n            return Response({\"error\": \"Could not connect to task queue. Please try again later.\"}, status=503)\n            \nclass RunScraperNowView(APIView):\n    permission_classes = [IsAuthenticated]\n\n    def post(self, request):\n        user = request.user\n        sync_attempt = SyncAttempt.objects.create(status='IN_PROGRESS')\n        try:\n            task = run_scrapers.delay(user.id)\n            return Response({\n                \"message\": \"Scraper started\",\n                \"sync_attempt_id\": sync_attempt.id,\n                \"task_id\": str(task.id)\n            })\n        except OperationalError:\n            sync_attempt.status = 'FAILED'\n            sync_attempt.error_message = \"Could not connect to task queue.\"\n            sync_attempt.save()\n            return Response({\"error\": \"Could not connect to task queue. Please try again later.\"}, status=503)\n\n\n        \nclass SyncHistoryView(APIView):\n    permission_classes = [IsAuthenticated]\n\n    def get(self, request):\n        user = request.user\n        today = timezone.now().date()\n        last_successful = SyncAttempt.objects.filter(user=user, status='COMPLETED').order_by('-end_time').first()\n        sync_history = {\n            \"lastSuccessful\": last_successful.end_time.isoformat() if last_successful else None,\n            \"totalToday\": SyncAttempt.objects.filter(user=user, start_time__date=today).count(),\n            \"failedToday\": SyncAttempt.objects.filter(user=user, start_time__date=today, status='FAILED').count()\n        }\n        return Response(sync_history)",
      "line_count": 95
    },
    {
      "name": "tests.py",
      "path": "scraper/tests.py",
      "size": 1202,
      "type": "text",
      "content_preview": "from django.test import TestCase\n\nfrom unittest.mock import patch\n\nfrom .scraper import scrape_mclarty_daniel\n\nfrom .models import VehicleListing\n\n\n\nclass McLartyDanielScraperTests(TestCase):\n\n\n\n    @patch('scraper.scrape_mclarty_daniel.webdriver.Chrome')\n\n    def test_successful_scrape(self, mock_chrome):\n\n        # Mock the Chrome driver and its methods\n",
      "line_count": 20
    },
    {
      "name": "serializers.py",
      "path": "scraper/serializers.py",
      "size": 408,
      "type": "text",
      "content": "from rest_framework import serializers\nfrom .models import VehicleListing\n\nclass VehicleListingSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = VehicleListing\n        fields = ['id', 'dealership', 'title', 'price', 'msrp', 'year', 'make', 'model', 'image_url', 'created_at', 'updated_at', 'views', 'needs_update']\n        read_only_fields = ['id', 'created_at', 'updated_at', 'views']",
      "line_count": 8
    },
    {
      "name": "scraper.py",
      "path": "scraper/scraper.py",
      "size": 4127,
      "type": "text",
      "content_preview": "import requests\n\nfrom bs4 import BeautifulSoup\n\nfrom django.utils import timezone\n\nfrom .models import VehicleListing\n\nimport logging\n\nimport re\n\nfrom django.db import DataError\n\n\n\nlogger = logging.getLogger(__name__)\n\n\n",
      "line_count": 20
    },
    {
      "name": "__init__.py",
      "path": "scraper/__init__.py",
      "size": 49,
      "type": "text",
      "content_preview": "default_app_config = 'scraper.apps.ScraperConfig'",
      "line_count": 1
    },
    {
      "name": "tasks.py",
      "path": "scraper/tasks.py",
      "size": 1506,
      "type": "text",
      "content_preview": "from celery import shared_task\n\nfrom .scraper import scrape_mclarty_daniel\n\nfrom .models import SyncAttempt, VehicleListing\n\nfrom django.contrib.auth.models import get_user_model\n\nfrom django.utils import timezone\n\n\n\n@shared_task\n\ndef run_scrapers(user_id):\n\n    User = get_user_model()\n\n    try:\n",
      "line_count": 20
    },
    {
      "name": "admin.py",
      "path": "scraper/admin.py",
      "size": 639,
      "type": "text",
      "content": "from django.contrib import admin\nfrom .models import VehicleListing, SyncAttempt\n\n@admin.register(VehicleListing)\nclass VehicleListingAdmin(admin.ModelAdmin):\n    list_display = ('year', 'make', 'model', 'price', 'msrp', 'dealership', 'views', 'needs_update')\n    list_filter = ('make', 'year', 'dealership', 'needs_update')\n    search_fields = ('make', 'model', 'dealership')\n\n@admin.register(SyncAttempt)\nclass SyncAttemptAdmin(admin.ModelAdmin):\n    list_display = ('id', 'start_time', 'end_time', 'status', 'listings_added', 'listings_updated')\n    list_filter = ('status',)\n    readonly_fields = ('start_time', 'end_time', 'duration')",
      "line_count": 14
    },
    {
      "name": "models.py",
      "path": "scraper/models.py",
      "size": 2076,
      "type": "text",
      "content": "from django.db import models\nfrom django.contrib.auth.models import User\nfrom django.utils import timezone\nfrom django.conf import settings\n\nclass VehicleListing(models.Model):\n    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='vehicle_listings')\n    # ... rest of the model fields ...)\n    dealership = models.CharField(max_length=100)\n    title = models.CharField(max_length=500)\n    price = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)\n    msrp = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)\n    year = models.IntegerField()\n    make = models.CharField(max_length=50)\n    model = models.CharField(max_length=50)\n    image_url = models.URLField(max_length=500)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    views = models.IntegerField(default=0)\n    needs_update = models.BooleanField(default=False)\n\n    def __str__(self):\n        return f\"{self.year} {self.make} {self.model} - {self.dealership} (User: {self.user.username})\"\n\n\nclass SyncAttempt(models.Model):\n    STATUS_CHOICES = [\n        ('PENDING', 'Pending'),\n        ('IN_PROGRESS', 'In Progress'),\n        ('COMPLETED', 'Completed'),\n        ('FAILED', 'Failed'),\n    ]\n    \n    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='sync_attempts', null=True, blank=True )\n    start_time = models.DateTimeField(auto_now_add=True)\n    end_time = models.DateTimeField(null=True, blank=True)\n    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='PENDING')\n    listings_added = models.IntegerField(default=0)\n    listings_updated = models.IntegerField(default=0)\n    error_message = models.TextField(blank=True, null=True)\n\n    def __str__(self):\n        return f\"Sync Attempt {self.id} - {self.status} (User: {self.user.username})\"\n\n    def duration(self):\n        if self.end_time:\n            return self.end_time - self.start_time\n        return timezone.now() - self.start_time\n",
      "line_count": 48
    },
    {
      "name": "check_database.py",
      "path": "scraper/management/commands/check_database.py",
      "size": 804,
      "type": "text",
      "content_preview": "from django.core.management.base import BaseCommand\n\nfrom scraper.models import VehicleListing\n\n\n\nclass Command(BaseCommand):\n\n    help = 'Check the content of the VehicleListing table'\n\n\n\n    def handle(self, *args, **options):\n\n        total_listings = VehicleListing.objects.count()\n\n        self.stdout.write(self.style.SUCCESS(f'Total vehicle listings: {total_listings}'))\n\n\n",
      "line_count": 20
    },
    {
      "name": "urls.py",
      "path": "dealer_sync_backend/urls.py",
      "size": 961,
      "type": "text",
      "content": "\"\"\"\nURL configuration for dealer_sync_backend project.\n\nThe `urlpatterns` list routes URLs to views. For more information please see:\n    https://docs.djangoproject.com/en/5.0/topics/http/urls/\nExamples:\nFunction views\n    1. Add an import:  from my_app import views\n    2. Add a URL to urlpatterns:  path('', views.home, name='home')\nClass-based views\n    1. Add an import:  from other_app.views import Home\n    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')\nIncluding another URLconf\n    1. Import the include() function: from django.urls import include, path\n    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))\n\"\"\"\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/auth/', include('authentication.urls')),\n    path('api/', include('dashboard.urls')),\n    path('api/scraper/', include('scraper.urls')),  # Changed from 'scraping'\n]",
      "line_count": 25
    },
    {
      "name": "wsgi.py",
      "path": "dealer_sync_backend/wsgi.py",
      "size": 415,
      "type": "text",
      "content_preview": "\"\"\"\n\nWSGI config for dealer_sync_backend project.\n\n\n\nIt exposes the WSGI callable as a module-level variable named ``application``.\n\n\n\nFor more information on this file, see\n\nhttps://docs.djangoproject.com/en/5.0/howto/deployment/wsgi/\n\n\"\"\"\n\n\n\nimport os\n",
      "line_count": 20
    },
    {
      "name": "__init__.py",
      "path": "dealer_sync_backend/__init__.py",
      "size": 129,
      "type": "text",
      "content_preview": "# DEALERSYNC/dealer_sync_backend/dealer_sync_backend/__init__.py\n\nfrom .celery import app as celery_app\n\n\n\n__all__ = ('celery_app',)",
      "line_count": 7
    },
    {
      "name": "asgi.py",
      "path": "dealer_sync_backend/asgi.py",
      "size": 415,
      "type": "text",
      "content_preview": "\"\"\"\n\nASGI config for dealer_sync_backend project.\n\n\n\nIt exposes the ASGI callable as a module-level variable named ``application``.\n\n\n\nFor more information on this file, see\n\nhttps://docs.djangoproject.com/en/5.0/howto/deployment/asgi/\n\n\"\"\"\n\n\n\nimport os\n",
      "line_count": 20
    },
    {
      "name": "settings.py",
      "path": "dealer_sync_backend/settings.py",
      "size": 4849,
      "type": "text",
      "content": "\"\"\"\nDjango settings for dealer_sync_backend project.\n\nGenerated by 'django-admin startproject' using Django 5.0.6.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/5.0/topics/settings/\n\nFor the full list of settings and their values, see\nhttps://docs.djangoproject.com/en/5.0/ref/settings/\n\"\"\"\n\nfrom decouple import config\nfrom pathlib import Path\nfrom datetime import timedelta\nfrom celery.schedules import crontab\nimport os\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = \"django-insecure-+-s$27uxhbg&5)jk#yeb1c^3m$p%y4ihix&=q0x1a#ah*3)-cz\"\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    \"rest_framework\",\n    \"rest_framework_simplejwt\",\n    \"corsheaders\",\n    \"scraper\",\n    \"dashboard\",\n    \"authentication\",\n]\n\n\nMIDDLEWARE = [\n    \"django.middleware.security.SecurityMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"django.contrib.messages.middleware.MessageMiddleware\",\n    \"django.middleware.clickjacking.XFrameOptionsMiddleware\",\n    'corsheaders.middleware.CorsMiddleware',\n]\n\nROOT_URLCONF = \"dealer_sync_backend.urls\"\n\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",\n                \"django.contrib.auth.context_processors.auth\",\n                \"django.contrib.messages.context_processors.messages\",\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = \"dealer_sync_backend.wsgi.application\"\n\n\n# Database\n# https://docs.djangoproject.com/en/5.0/ref/settings/#databases\n\n\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': config('POSTGRES_DB'),\n        'USER': config('POSTGRES_USER'),\n        'PASSWORD': config('POSTGRES_PASSWORD'),\n        'HOST': config('DATABASE_HOST'),\n        'PORT': config('DATABASE_PORT'),\n    }\n}\n\n\n\n\n# Password validation\n# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.MinimumLengthValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.CommonPasswordValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.NumericPasswordValidator\",\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/5.0/topics/i18n/\n\nLANGUAGE_CODE = \"en-us\"\n\nTIME_ZONE = \"UTC\"\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\n\nCORS_ALLOW_ALL_ORIGINS = True  # For development only\nCORS_ALLOW_CREDENTIALS = True\n\nCORS_ALLOWED_ORIGINS = [\n    \"http://localhost:3000\",\n]\n\nSIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),\n    'ROTATE_REFRESH_TOKENS': True,\n    'BLACKLIST_AFTER_ROTATION': True,\n    'AUTH_HEADER_TYPES': ('Bearer',),\n    'USER_ID_FIELD': 'id',\n    'USER_ID_CLAIM': 'user_id',\n}\n\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n    'DEFAULT_PERMISSION_CLASSES': (\n        'rest_framework.permissions.IsAuthenticated',\n    ),\n}\n\nCELERY_BROKER_URL = 'redis://localhost:6379'\nCELERY_RESULT_BACKEND = 'redis://localhost:6379'\nCELERY_ACCEPT_CONTENT = ['application/json']\nCELERY_TASK_SERIALIZER = 'json'\nCELERY_RESULT_SERIALIZER = 'json'\nCELERY_TIMEZONE = 'UTC'\n\nCELERY_BEAT_SCHEDULE = {\n    'run-scrapers-daily': {\n        'task': 'scraper.tasks.run_scrapers',\n        'schedule': crontab(hour=0, minute=0),  # Run daily at midnight\n    },\n}\n",
      "line_count": 185
    },
    {
      "name": "celery.py",
      "path": "dealer_sync_backend/celery.py",
      "size": 800,
      "type": "text",
      "content_preview": "from __future__ import absolute_import, unicode_literals\n\nimport os\n\nfrom celery import Celery\n\nfrom kombu import Exchange, Queue\n\n\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'dealer_sync_backend.settings')\n\n\n\napp = Celery('dealer_sync_backend')\n\napp.config_from_object('django.conf:settings', namespace='CELERY')\n\napp.autodiscover_tasks()\n",
      "line_count": 20
    },
    {
      "name": "apps.py",
      "path": "dashboard/apps.py",
      "size": 150,
      "type": "text",
      "content_preview": "from django.apps import AppConfig\n\n\n\n\n\nclass DashboardConfig(AppConfig):\n\n    default_auto_field = 'django.db.models.BigAutoField'\n\n    name = 'dashboard'\n",
      "line_count": 12
    },
    {
      "name": "urls.py",
      "path": "dashboard/urls.py",
      "size": 404,
      "type": "text",
      "content": "\n\nfrom django.urls import path\nfrom .views import DashboardView, ListingsView, SyncHistoryView, SyncStartView\n\nurlpatterns = [\n    path('dashboard/', DashboardView.as_view(), name='dashboard'),\n    path('listings/', ListingsView.as_view(), name='listings'),\n    path('sync/history/', SyncHistoryView.as_view(), name='sync_history'),\n    path('sync/start/', SyncStartView.as_view(), name='sync_start'),\n]\n",
      "line_count": 11
    },
    {
      "name": "views.py",
      "path": "dashboard/views.py",
      "size": 4182,
      "type": "text",
      "content": "from rest_framework.views import APIView\nfrom rest_framework.response import Response\nfrom rest_framework.permissions import IsAuthenticated\nfrom scraper.tasks import run_scrapers\nfrom scraper.models import VehicleListing, SyncAttempt\nfrom .serializers import VehicleListingSerializer\nfrom rest_framework.pagination import PageNumberPagination\nfrom django.db.models import Count\nfrom django.utils import timezone\nfrom datetime import timedelta\n\nclass DashboardView(APIView):\n    permission_classes = [IsAuthenticated]\n\n    def get(self, request):\n        user = request.user\n        total_listings = VehicleListing.objects.filter(user=user).count()\n        today = timezone.now().date()\n        listings_today = VehicleListing.objects.filter(user=user, created_at__date=today).count()\n        \n        active_syncs = SyncAttempt.objects.filter(user=user, status='IN_PROGRESS').count()\n        pending_updates = VehicleListing.objects.filter(user=user, needs_update=True).count()\n        total_views = VehicleListing.objects.filter(user=user).aggregate(total_views=Count('views'))['total_views']\n\n        # Get data for chart (last 4 months)\n        chart_data = []\n        for i in range(3, -1, -1):\n            month_start = (timezone.now() - timedelta(days=30*i)).replace(day=1)\n            month_end = (month_start + timedelta(days=32)).replace(day=1) - timedelta(days=1)\n            listings_count = VehicleListing.objects.filter(user=user, created_at__range=(month_start, month_end)).count()\n            views_count = VehicleListing.objects.filter(user=user, created_at__range=(month_start, month_end)).aggregate(total_views=Count('views'))['total_views']\n            chart_data.append({\n                \"name\": month_start.strftime(\"%b\"),\n                \"listings\": listings_count,\n                \"views\": views_count\n            })\n\n        # Recent activity (last 4 events)\n        recent_listings = VehicleListing.objects.filter(user=user).order_by('-created_at')[:4]\n        recent_activity = [\n            {\n                \"title\": \"New Listing Added\",\n                \"description\": f\"{listing.year} {listing.make} {listing.model}\",\n                \"time\": f\"{(timezone.now() - listing.created_at).days} days ago\"\n            } for listing in recent_listings\n        ]\n\n        dashboard_data = {\n            \"stats\": [\n                {\"title\": \"Total Listings\", \"value\": total_listings, \"icon\": \"Car\"},\n                {\"title\": \"Active Syncs\", \"value\": active_syncs, \"icon\": \"Activity\"},\n                {\"title\": \"Pending Updates\", \"value\": pending_updates, \"icon\": \"Clock\"},\n                {\"title\": \"Total Views\", \"value\": total_views, \"icon\": \"Eye\"},\n            ],\n            \"recentActivity\": recent_activity,\n            \"chartData\": chart_data\n        }\n        return Response(dashboard_data)\n\n\nclass ListingsView(APIView):\n    permission_classes = [IsAuthenticated]\n\n    def get(self, request):\n        paginator = PageNumberPagination()\n        paginator.page_size = 20\n        listings = VehicleListing.objects.filter(user=request.user).order_by('-created_at')\n        result_page = paginator.paginate_queryset(listings, request)\n        serializer = VehicleListingSerializer(result_page, many=True)\n        return paginator.get_paginated_response(serializer.data)\n    \nclass SyncHistoryView(APIView):\n    permission_classes = [IsAuthenticated]\n\n    def get(self, request):\n        today = timezone.now().date()\n        last_successful = SyncAttempt.objects.filter(status='COMPLETED').order_by('-end_time').first()\n        sync_history = {\n            \"lastSuccessful\": last_successful.end_time if last_successful else None,\n            \"totalToday\": SyncAttempt.objects.filter(start_time__date=today).count(),\n            \"failedToday\": SyncAttempt.objects.filter(start_time__date=today, status='FAILED').count()\n        }\n        return Response(sync_history)\n\nclass SyncStartView(APIView):\n    permission_classes = [IsAuthenticated]\n\n    def post(self, request):\n        # Trigger the Celery task\n        task = run_scrapers.delay()\n        return Response({\n            \"message\": \"Sync process started\",\n            \"task_id\": task.id\n        })",
      "line_count": 94
    },
    {
      "name": "tests.py",
      "path": "dashboard/tests.py",
      "size": 1799,
      "type": "text",
      "content_preview": "from django.test import TestCase\n\nfrom django.urls import reverse\n\nfrom rest_framework.test import APIClient\n\nfrom rest_framework import status\n\nfrom django.contrib.auth.models import User\n\nfrom scraper.models import VehicleListing, SyncAttempt\n\nfrom django.utils import timezone\n\n\n\nclass DashboardTests(TestCase):\n\n    def setUp(self):\n",
      "line_count": 20
    },
    {
      "name": "serializers.py",
      "path": "dashboard/serializers.py",
      "size": 319,
      "type": "text",
      "content": "from rest_framework import serializers\nfrom scraper.models import VehicleListing\n\nclass VehicleListingSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = VehicleListing\n        fields = ['id', 'dealership', 'title', 'price', 'msrp', 'year', 'make', 'model', 'image_url', 'created_at', 'updated_at']",
      "line_count": 7
    },
    {
      "name": "__init__.py",
      "path": "dashboard/__init__.py",
      "size": 0,
      "type": "text",
      "content_preview": "",
      "line_count": 1
    },
    {
      "name": "admin.py",
      "path": "dashboard/admin.py",
      "size": 63,
      "type": "text",
      "content": "from django.contrib import admin\n\n# Register your models here.\n",
      "line_count": 3
    },
    {
      "name": "models.py",
      "path": "dashboard/models.py",
      "size": 57,
      "type": "text",
      "content": "from django.db import models\n\n# Create your models here.\n",
      "line_count": 3
    }
  ],
  "directories": [
    {
      "path": "authentication",
      "name": "authentication"
    },
    {
      "path": "scraper",
      "name": "scraper"
    },
    {
      "path": "scraper/management",
      "name": "management"
    },
    {
      "path": "scraper/management/commands",
      "name": "commands"
    },
    {
      "path": "dealer_sync_backend",
      "name": "dealer_sync_backend"
    },
    {
      "path": "dashboard",
      "name": "dashboard"
    }
  ],
  "analysis": {
    "framework": "Django",
    "django_apps": [
      "authentication",
      "scraper",
      "dashboard"
    ]
  }
}